1. 在 JSX 語法中
    -> 
       { 123 }
       { NaN }
       { underfind }
       { null }
       { false }
       { true }
       { '' }
       { 456 }
       { [ 456, 789 ] }
        以上內容會直接變成 123456789

       { {a: 123 } }
       以上內容會直接變成 會直接抱錯 ，物件不是一個合法的陣列

       { (()=>{ return 99999 })() } ->
       以上內容會直接變成 99999，因為可以呼叫吃函式

    -> 常見運算
        const test = 1
            在JSX中
                -> 三元運算
                if else 簡寫
                -> { test > 1 ? <h1>{test}</h1> : <h1>無值</h1> }
                -> 無法使用一般的 if else 語法
                    -> 但可以使用 IIFE 自執函式來執行
                    -> { (()=>{ if(){..}else{...} })() }
        const test2 = 1
        const test3 = true
            在JSX中
                if 簡寫
                -> { test2 && <h1>{test2}</h1> }
                -> { test3 && <h1>呈現畫面</h1> } test3 有值就呈現 <h1>呈現畫面</h1>
                -> { test3 ? <h1>呈現畫面</h1> : '' } test3 無有值就呈現 ‘’ 
    -> 
    -> 