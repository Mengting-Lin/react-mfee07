React
 - 用於開發網頁應用程式，也可延伸使用至手機應用(react Native)/伺服器端(Node.js/SSR)
 - 並不是完整的framework，接近傳統軟體MVC設計模式中的view
 - 立基於JS，須熟悉ES6語法

React五大特性
1. Virtual DOM(虛擬DOM)
 - react中自行管理的DOM結構，用於差異比較後再與真實DOM做渲染
 - 不會比直接處理DOM更快，只是協助建立可維護的應用程式，而且"足夠快速"的進行DOM處理
2. JSX
 - 是JS的語法糖。JS指javascript，X指XML
 - 是React.createElement的簡寫法，透過babel可編譯為JS讓瀏覽器讀取
3. 元件化
4. 單向資料流
 - 只有父母元件可對子女元件下屬性/變更屬性
 - 子女元件若欲傳遞資料給父母元件需透過間接方式(較迂迴，但不是不行)
 - 優：在複雜的程式環境中較易進行除錯、最佳化(雙向資料流則是較易於學習及開發)
5. 宣告式程式設計(相對於指令式程式設計而言)
 - 著重於目標，電腦了解目標後採取各項措施完成目標，減少程式的副作用

安裝React開發工具
1. yarn套件管理工具
 - 是Facebook最近推出的新專案，目的是提供更快速的套件安裝
 - 目前在最新版本的React與React Native中都有支援
 - 可做為npm的輔助工具，開發react專案用
2. VS code相關擴充工具
(1) babel javascript --將新版JS語法轉譯為ES5，以利瀏覽器讀取
(2) prettier --檢測語法錯誤
(3) rainbow brackets
(4) ES lint --管理專案用
(5) vscode-icon
(6) Chrome debugger
PS. 修改VSCode使用者設定(選單->喜好設定)：
(1) 加入下列字串(ESLint與Prettier)
"editor.formatOnSave": true,
    "[javascript]": {
        "editor.formatOnSave": false
    },
    "prettier.disableLanguages": [
        "js"
    ],
    "eslint.alwaysShowStatus": true,
    "editor.codeActionsOnSave": {
        "source.fixAll.eslint": true
    }
(2)右下角CRLF(for MAC)調整為LF(for Window)
3. Chrome瀏覽器擴充功能
(1) React Developer Tools
 - 主要是用來除錯用的，可觀察React應用程式在網頁上執行的一些資訊 (Ctrl+Shit+I > Component)
(2) Redux DevTools

React開發新專案
1. 終端機輸入指令安裝create-react-app工具程式
npm install -g create-react-app
2. 切換到新專案資料夾再輸入指令
npx create-react-app my-app 
(npx為npm的子項目，安裝管理項目用)
(my-app為專案資料夾名稱)
3. 安裝ESLint與Prettier模組
(下列yarn/npm終端機指令，二擇一)
yarn add eslint-plugin-prettier prettier eslint-config-react-app eslint-plugin-import eslint-plugin-react eslint-plugin-jsx-a11y eslint-plugin-react-hooks
npm install --save-dev eslint-plugin-prettier prettier eslint-config-react-app eslint-plugin-import eslint-plugin-react eslint-plugin-jsx-a11y eslint-plugin-react-hooks
4. 拷貝下列三個設定檔，放入專案根目錄中
(1) .eslintrc
(2) .eslintignore
(3) .prettierrc

PS. create-react-app這個樣版文件，把所有的設定文件都藏在node_modules/react-scripts之中
PS. package.json中"scrpits"可查看指令
(1) "start"：啟動專案
(2) "build"：打包專案(含public&src資料夾中檔案)
(3) "eject"：彈出(可以把所有的設定值移出到根目錄之中，這是一次性的指令)

React Component
1. Functional Component (函式型元件)
 - 優：可以進行比較複雜的操作和元件生命週期的控制    
 - 缺：若不熟悉hook用法，容易出錯 / 相對於stateless components耗費資源
2. Class Component (類別型元件)
 - 單純地 render UI 的 stateless components，沒有內部狀態、沒有實作物件和 ref，沒有生命週期函數
 - 相對少用，但常應用於react Native(手機開發)
 - 優：若非需要控制生命週期的話建議使用，能獲得比較好的效能

React
(1) state：狀態
 - 元件中自行控管的內部資料
 - 只能在元件內部存取與更動，無法在不同元件間直接存取使用s
 - setState是改變state物件值的方法
(2) props：屬性(properties)
 - 是個物件

開發react專案
https://create-react-app.dev/docs/getting-started

安裝套件管理工具
yarn
https://classic.yarnpkg.com/zh-Hant/docs/install/#windows-stable

*
ref-->傳址
key
不屬於props

jQuery整合React基本步驟
https://github.com/eyesofkids/201/issues/11
1. 安裝jquery模組
npm install jquery
yarn add jquery
2. 導入jquery模組
import $ from 'jquery'
3.程式碼寫於componentDidMount中
componentDidMount() {
    //jquery的程式碼需要寫在這裡，確保dom元素已經出現在網頁上
  }


SASS/SCSS - CRA+Bootstrap4搭配使用
https://github.com/eyesofkids/201/issues/15
https://github.com/eyesofkids/201/blob/master/data/0604/scss-200310.md
https://sass-lang.com/documentation
https://www.sassmeister.com/
安裝ruby
https://rubyinstaller.org/downloads/
cmd 
> gem install sass


將HTML碼轉成JSX語法注意事項(bootstrap)(JSX比HTML更嚴格)(幾乎所有HTML都可轉換成JSX)
https://github.com/eyesofkids/201/issues/10
1. 自行結尾的標記(單一行)的結尾必須要是/> - 最常見input, img, hr, br，例如<br>要改成<br />
2. class要換成className
3. for要換成htmlFor
4. style要變成Javascript的物件值(雙花括號)：<span style={{color:'red'}}>ABC</span>

只要有用到JSX語法就要匯入react
import React form 'react'
因為JSX是react中createElement的簡寫法

ref-->鉤子useRef
https://zh-hant.reactjs.org/docs/hooks-reference.html

react-reveal
https://www.react-reveal.com/examples/

react-icon
https://react-icons.github.io/

Scroll(捲動)或動作後動畫第三方函式庫參考
https://github.com/eyesofkids/201/issues/18
跳出視窗的React第三方函式庫
https://github.com/eyesofkids/201/issues/19


todo list 
http://todomvc.com/examples/react/#/

{123}
{null}          -->invisible
{undefined}     -->invisible
{''}            -->invisible
{Infinity}      -->invisible
{456}
{[789,1011]}
{{ a:131 }}     --> obj is not valid in react, use an array
{NaN}           -->number

{()=>{}}        -->invisible，因為沒有執行

{(function(){
    return <h1>hhhh</h1>
})()}

// if/else簡寫法
const test = 1
{(test>1)? <h1>{test}</h1> : <h1>沒有可用的test</h1>}   -->三元運算符

// if簡寫法：當test2存在時，回傳<h1>{test2}</h1>
const test2 = true
{test2 && <h1>{test2}</h1>}
{test2 ? <h1>{test2}</h1> : ''}

相當於下列if/else範例(需為立即函式)，但不建議使用
{(()=>{
    if (test>1) {
        return <h1>{test}</h1>
    } else {
        return <h1>沒有可用的test</h1>
    }
})()}

const test2 = 1
{test2 && <h1>{test2}</h1>}

安裝 react-router-dom
> yarn add react-router-dom
> npm install react-router-dom

react-router使用說明
https://github.com/eyesofkids/201/blob/master/data/0605/react-router%E4%BD%BF%E7%94%A8%E8%AA%AA%E6%98%8E.md
https://github.com/eyesofkids/201/issues/23

引入 react-router-dom
import { BrowserRouter as Router, Route, Link, Switch } from "react-router-dom"

return (
    <Router>
       <>
        <Link to="/">Home</Link>
        <Link to="/about">About</Link>

        <Switch>
            <Route path="/about">
                <About />
            </Route>
            <Route exact path="/">
                <Home />
            </Route>
        </Switch>
       </>
    </Router>
)

應用的最外層元件必須是Router元件

Router元件
- 只能有一個子元素在裡面，若有兩個以上的子元素，需用div或React.Fragment(<>...</>)先包含起來

Switch元件
- 通常會包裹Route元件
- 會從上到下尋找最近的一個，也只會使用一個

Route元件
- 使用來建立路由的對照表
- 可設置屬性很多，可以應用於各種應用情況
- 通常位置都是在你的應用的最上層元件的Router元件的最下面一段JSX碼

以Link取代a
<Link to="/about">關於我們</Link>

使用<a>時頁面會重新整理，資料會回到初始值狀態-->應使用router來跳轉頁面避免此問題

鉤子--函式型元件/類別型元件
高階元件(high order component=HOF)--類別型元件


redux
https://chentsulin.github.io/redux/docs/introduction/index.html
 - 用於狀態管理(集中式管理多個組件共享的狀態)的JS庫(不是react插件)
 - 藉由強加某些限制在更新發生的方式和時機上，試圖讓state的變化更有可預測性

redux三大原則：
1. 整個應用程式的state，被儲存在一個樹狀物件放在唯一的store裡面(所有的state都被儲存在單一一個single tree)
2. 改變state的唯一的方式是發出一個action，也就是一個描述發生什麼事的物件
 - 這能確保view和網路callback都不會直接寫入state。替代的，它們表達了一個改變state的意圖
 - 所有的改變都是集中的，並依照嚴格的順序一個接一個的發生，沒有需要特別注意的微妙race condition
 - 因為Action只是普通物件，所以它們可以被記錄、serialize、儲存、並在之後為了debug或測試目的而重播
3. 要指定state tree如何藉由action來轉變，你必須撰寫pure reducer
 - 取得先前的state和一個action，並回傳下一個state(要回傳一個新的state物件，而不要去改變先前的state)
 - 可從單一一個reducer開始，隨著應用程式成長，把它們拆分成比較小的reducer來管理state tree中的特定部分
 - 因為reducer只是function，你可以控制它們被呼叫的順序、傳遞額外的資料、或甚至建立可重用的reducer來做一些常見的任務，例如pagination

redux修改state流程：
(1)store讀取react components狀態
(2)action creators：生產action
(3)store：觸發dispatch事件(通知store的方法/傳遞action物件，需指定type/data)
(4)reducers：找到previousState回傳newState

Action
- 是store唯一的資訊來源
- 是從你的應用程式傳遞資料到你的store的資訊payload
- 藉由store.dispatch()來把它們傳遞到store
- 是一般的JavaScript物件，action必須有一個type屬性，它代表被執行的action的類型

const ADD_TODO = 'ADD_TODO'
{
  type: ADD_TODO,
  text: 'Build my first Redux app'
}


影片、ES6、複習、自傳、照片、html